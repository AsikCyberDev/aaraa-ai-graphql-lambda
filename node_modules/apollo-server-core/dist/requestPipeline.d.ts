import type { DataSource } from 'apollo-datasource';
import type { PersistedQueryOptions } from 'apollo-server-core/src/graphqlOptions';
import type { DocumentStore } from 'apollo-server-core/src/types';
import type { ApolloServerPlugin } from 'apollo-server-plugin-base';
import type { BaseContext, GraphQLExecutor, GraphQLRequest, GraphQLRequestContext, GraphQLResponse, ValidationRule } from 'apollo-server-types';
import { DocumentNode, GraphQLError, GraphQLFieldResolver, GraphQLFormattedError, GraphQLSchema, ParseOptions } from 'graphql';
export { GraphQLRequest, GraphQLRequestContext, GraphQLResponse };
export declare const APQ_CACHE_PREFIX = "apq:";
export interface GraphQLRequestPipelineConfig<TContext> {
    schema: GraphQLSchema;
    rootValue?: ((document: DocumentNode) => any) | any;
    validationRules?: ValidationRule[];
    executor?: GraphQLExecutor;
    fieldResolver?: GraphQLFieldResolver<any, TContext>;
    dataSources?: () => DataSources<TContext>;
    persistedQueries?: PersistedQueryOptions;
    formatError?: (error: GraphQLError) => GraphQLFormattedError;
    formatResponse?: (response: GraphQLResponse, requestContext: GraphQLRequestContext<TContext>) => GraphQLResponse | null;
    plugins?: ApolloServerPlugin[];
    dangerouslyDisableValidation?: boolean;
    documentStore?: DocumentStore | null;
    parseOptions?: ParseOptions;
}
export declare type DataSources<TContext> = {
    [name: string]: DataSource<TContext>;
};
declare type Mutable<T> = {
    -readonly [P in keyof T]: T[P];
};
export declare function processGraphQLRequest<TContext extends BaseContext>(config: GraphQLRequestPipelineConfig<TContext>, requestContext: Mutable<GraphQLRequestContext<TContext>>): Promise<GraphQLResponse>;
//# sourceMappingURL=requestPipeline.d.ts.map